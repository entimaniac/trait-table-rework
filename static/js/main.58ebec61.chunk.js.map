{"version":3,"sources":["logo.svg","TraitRow.js","TraitTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TraitRow","types","handleInputChange","event","props","editField","data","id","target","name","value","stateIndicator","this","loading","CircularProgress","submitted","success","style","color","green","className","TextField","label","onChange","e","FormControl","InputLabel","Select","width","labelWidth","type","map","index","MenuItem","key","sid","provider","source","IconButton","aria-label","onClick","remove","disabled","React","Component","TraitTable","fileHeaders","defaultRow","fileUpload","file","files","Papa","parse","header","complete","results","state","row","trim","setState","traitRows","console","log","addRow","deepCopy","JSON","stringify","defaultRowCopy","push","removeRow","filteredList","filter","item","editRow","fieldName","fieldValue","find","i","submit","rows","errorOrNot","uploaded","sleep","then","milliseconds","Promise","resolve","setTimeout","Paper","Button","variant","component","display","colSpan","length","Grid","container","direction","justify","alignItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58ebec61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./TraitTable.css\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport { green } from \"@material-ui/core/colors\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nclass TraitRow extends React.Component {\n  types = [\"TURNKEY\", \"DATA ENRICHMENT\", \"CUSTOM\", \"HEALTH\", \"CLIENT\"];\n\n  handleInputChange = (event) => {\n    // this.setState({ [event.target.name]: event.target.value });\n    // this.props\n    this.props.editField(\n      this.props.data.id,\n      event.target.name,\n      event.target.value\n    );\n  };\n\n  render() {\n    let stateIndicator;\n    if (this.props.data.loading) {\n      stateIndicator = <CircularProgress />;\n    } else if (this.props.data.submitted) {\n      if (this.props.data.success) {\n        stateIndicator = <DoneIcon style={{ color: green[500] }} />;\n      } else {\n        stateIndicator = <ErrorIcon color=\"error\" />;\n      }\n    }\n    return (\n      <tr>\n        <td className=\"icon-cell\">{stateIndicator}</td>\n        <td>\n          <TextField\n            name=\"name\"\n            label=\"Name\"\n            value={this.props.data.name}\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </td>\n        <td>\n          <FormControl>\n            <InputLabel>Type</InputLabel>\n            <Select\n              style={{ width: 150 }}\n              labelWidth={10}\n              name=\"type\"\n              value={this.props.data.type}\n              onChange={(e) => this.handleInputChange(e)}\n            >\n              {this.types.map((type, index) => (\n                <MenuItem key={index} value={type}>\n                  {type}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </td>\n        <td>\n          <TextField\n            name=\"sid\"\n            label=\"SID\"\n            value={this.props.data.sid}\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </td>\n        <td>\n          <TextField\n            name=\"provider\"\n            label=\"Provider\"\n            value={this.props.data.provider}\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </td>\n        <td>\n          <TextField\n            name=\"source\"\n            label=\"Source\"\n            value={this.props.data.source}\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </td>\n        <td>\n          <IconButton\n            aria-label=\"delete\"\n            onClick={() => this.props.remove(this.props.data.id)}\n            disabled={this.props.data.submitted}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default TraitRow;\n","import React from \"react\";\nimport \"./TraitTable.css\";\nimport TraitRow from \"./TraitRow\";\nimport Papa from \"papaparse\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nclass TraitTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { traitRows: [], index: 0 };\n  }\n\n  fileHeaders = [\"NAME\", \"TYPE\", \"SID\", \"PROVIDER\", \"SOURCE\"];\n  // fileHeaders = [\"name\", \"type\", \"sid\", \"provider\", \"source\"];\n\n  defaultRow = {\n    name: \"\",\n    type: \"\",\n    sid: \"\",\n    provider: \"\",\n    source: \"\",\n  };\n\n  fileUpload = (event) => {\n    let file = event.target.files[0];\n    Papa.parse(file, {\n      header: true,\n      complete: (results) => {\n        let index = this.state.index;\n        for (let row of results.data) {\n          row.type = row.type.trim();\n          row.id = index++;\n        }\n        this.setState({ index: index });\n        this.setState({ traitRows: results.data });\n        console.log(this.state);\n      },\n    });\n  };\n\n  addRow = () => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state.traitRows));\n    let defaultRowCopy = JSON.parse(JSON.stringify(this.defaultRow));\n\n    defaultRowCopy.id = this.state.index;\n    deepCopy.push(defaultRowCopy);\n\n    this.setState({ traitRows: deepCopy });\n    this.setState({ index: this.state.index + 1 });\n  };\n\n  removeRow = (id) => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state.traitRows));\n    let filteredList = deepCopy.filter(function (item) {\n      return item.id !== id;\n    });\n    this.setState({ traitRows: filteredList });\n  };\n\n  editRow = (id, fieldName, fieldValue) => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state.traitRows));\n\n    deepCopy.find((row, i) => {\n      if (row.id === id) {\n        deepCopy[i][fieldName] = fieldValue;\n        return true;\n      }\n      return false;\n    });\n    this.setState({ traitRows: deepCopy });\n  };\n\n  submit = () => {\n    let rows = JSON.parse(JSON.stringify(this.state.traitRows));\n\n    let errorOrNot = false;\n    for (let row of rows) {\n      if (!row.uploaded) {\n        row.loading = true;\n        this.setState({ traitRows: rows });\n\n        this.sleep(1000).then(() => {\n          row.loading = false;\n          row.uploaded = true;\n          row.submitted = true;\n          row.success = errorOrNot;\n          errorOrNot = !errorOrNot;\n          console.log(row);\n          this.setState({ traitRows: rows });\n        });\n      }\n    }\n  };\n\n  sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  render() {\n    return (\n      <Paper className=\"paper-container\">\n        <Button variant=\"contained\" component=\"label\">\n          Choose File\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            onChange={this.fileUpload}\n          />\n        </Button>\n        <table>\n          <tbody>\n            <tr>\n              <th className=\"hide-this\">\n                <CircularProgress />\n              </th>\n              {this.fileHeaders.map((header, index) => (\n                <th key={index}>{header}</th>\n              ))}\n              <th className=\"hide-this\">\n                <CircularProgress />\n              </th>\n            </tr>\n\n            {this.state.traitRows.map((row, index) => (\n              <TraitRow\n                key={row.id}\n                data={row}\n                editField={this.editRow}\n                remove={this.removeRow}\n              />\n            ))}\n            <tr>\n              <td />\n              <td colSpan={this.fileHeaders.length}>\n                <Button\n                  className=\"add-row-button\"\n                  variant=\"contained\"\n                  color=\"default\"\n                  onClick={this.addRow}\n                >\n                  <AddIcon />\n                </Button>\n              </td>\n              <td />\n            </tr>\n          </tbody>\n        </table>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Button variant=\"contained\" color=\"primary\" onClick={this.submit}>\n            submit\n          </Button>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default TraitTable;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TraitTable from \"./TraitTable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TraitTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}